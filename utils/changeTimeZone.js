import { format, parseISO } from "date-fns";
import { utcToZonedTime } from "date-fns-tz";
import { enUS } from "date-fns/locale";

// function to change timezone
function changeTimezone(date, locale, timeZone) {
  const parisDate = utcToZonedTime(date, timeZone);

  // console.log(parisDate,"parisDate")
  const useZonedTime = format(parisDate, "LL/dd/yyyy HH:mm:ss  zzzz", {
    timeZone: timeZone,
    locale: locale || enUS,
  });

  // console.log("new Date(useZonedTime)", new Date(useZonedTime));
  return new Date(useZonedTime);
}
export default changeTimezone;

// import { zonedTimeToUtc } from 'date-fns-tz'

// const date = getDatePickerValue() // e.g. 2014-06-25 10:00:00 (picked in any time zone)
// const timeZone = getTimeZoneValue() // e.g. America/Los_Angeles

// const utcDate = zonedTimeToUtc(date, timeZone) // In June 10am in Los Angeles is 5pm UTC

// postToServer(utcDate.toISOString(), timeZone) // post 2014-06-25T17:00:00.000Z, America/Los_Angeles

// import { utcToZonedTime } from 'date-fns-tz'

// const { isoDate, timeZone } = fetchInitialValues() // 2014-06-25T10:00:00.000Z, America/New_York

// const date = utcToZonedTime(isoDate, timeZone) // In June 10am UTC is 6am in New York (-04:00)

// renderDatePicker(date) // 2014-06-25 06:00:00 (in the system time zone)
// renderTimeZoneSelect(timeZone) // America/New_York

// import { format, utcToZonedTime } from 'date-fns-tz'

// const date = new Date('2014-10-25T10:46:20Z')
// const nyTimeZone = 'America/New_York'
// const parisTimeZone = 'Europe/Paris'

// const nyDate = utcToZonedTime(date, nyTimeZone)
// const parisDate = utcToZonedTime(date, parisTimeZone)

// format(nyDate, 'yyyy-MM-dd HH:mm:ssXXX', { timeZone: 'America/New_York' }) // 2014-10-25 06:46:20-04:00
// format(nyDate, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone: 'America/New_York' }) // 2014-10-25 06:46:20 EST
// format(parisDate, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone: 'Europe/Paris' }) // 2014-10-25 10:46:20 GMT+2

// // The time zone name is generated by the Intl API which works best when a locale is also provided
// import enGB from 'date-fns/locale/en-GB'

// format(parisDate, 'yyyy-MM-dd HH:mm:ss zzz', {
//   timeZone: 'Europe/Paris',
//   locale: enGB,
// })
// // 2014-10-25 10:46:20 CEST
// format(parisDate, 'yyyy-MM-dd HH:mm:ss zzzz', {
//   timeZone: 'Europe/Paris',
//   locale: enGB,
// })
// // 2014-10-25 10:46:20 Central European Summer Time

// import { toDate, format } from 'date-fns-tz'

// // Offsets in the date string work as usual and take precedence
// const parisDate = toDate('2014-10-25T13:46:20+02:00')
// format(parisDate, 'yyyy-MM-dd HH:mm:ssZ', { timeZone: 'Europe/Paris' }) // 2014-10-25 13:46:20+02:00

// // Since toDate simply clones a Date instance timeZone option is effectively ignored in this case
// const date = new Date('2014-10-25T13:46:20Z')
// const clonedDate = toDate(date, { timeZone: 'Europe/Paris' })
// assert(date.valueOf() === clonedDate.valueOf())

// // When there is no offset in the date string the timeZone property is used
// const bangkokDate = toDate('2014-10-25T13:46:20', { timeZone: 'Asia/Bangkok' })
// format(bangkokDate, 'yyyy-MM-dd HH:mm:ssZ', { timeZone: 'Asia/Bangkok' }) // 2014-10-25 13:46:20+07:00

// const nyDate = toDate('2014-10-25T13:46:20 America/New_York')
// format(nyDate, 'yyyy-MM-dd HH:mm:ssZ', { timeZone: 'America/New_York' }) // 2014-10-25 13:46:20-04:00

// create a new function
// using date-fns-tz
//
/*

get utcDate from browser and send it to backend 

then get date from  utc date based on timezone
Intl.DateTimeFormat().resolvedOptions().timeZone

*/
